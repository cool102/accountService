type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.springframework.http.HttpStatus;

    import java.util.*;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, Object> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, Object value) {
        properties.put(key, value);
        return this;
      }

    }
    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String getEmployeePaymentApi = "/api/empl/payment";
      private final String postPaymentApi = "/api/acct/payments";
      private final String putRoleApi = "/api/admin/user/role";
      private final String putAccessApi = "/api/admin/user/access";
      private final String adminApi = "/api/admin/user/";
      private final String auditorApi = "/api/security/events/";

      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      private final TestReq ivanIvanov = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Ivanov")
              .setProps("email", "IvanIvanov@acme.com")
              .setProps("password", "rXoa4CvqpLxW");
      private final TestReq petrPetrov = new TestReq().setProps("name", "Petr")
              .setProps("lastname", "Petrov")
              .setProps("email", "PetrPetrov@acme.com")
              .setProps("password", "nWza98hjkLPE");
      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");

      private final String ivanIvanovCorrectUser = ivanIvanov.toJson();
      private final String petrPetrovCorrectUser = petrPetrov.toJson();
      private final String jDCorrectUser = johnDoe.toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String petrPetrovWrongPassword = new TestReq(petrPetrov).setProps("password", "none").toJson();
      private final String maxMusWrongEmail = new TestReq(maxMus).setProps("email", "maxmustermann@google.com").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();
      private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();
      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();

      private final String firstResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com")
                      .setProps("roles", new String[] {"ROLE_AUDITOR", "ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String secondResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com")
                      .setProps("roles", new String[] {"ROLE_AUDITOR", "ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 5).setProps("name", "Petr").setProps("lastname", "Petrov")
                      .setProps("email", "petrpetrov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });

      private String[] auditorResponseApi = new String[]{
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "johndoe@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "ivanivanov@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "GRANT_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Grant role AUDITOR to ivanivanov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "maxmustermann@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "petrpetrov@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@google.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "nautilus@pompilius.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "GRANT_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Grant role ACCOUNTANT to petrpetrov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "REMOVE_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Remove role ACCOUNTANT from petrpetrov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "DELETE_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "petrpetrov@acme.com").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "CHANGE_PASSWORD").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "johndoe@acme.com").setProps("path", "/api/auth/changepass").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user/role").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/acct/payments").setProps("path", "/api/acct/payments").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/acct/payments").setProps("path", "/api/acct/payments").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/security/events").setProps("path", "/api/security/events").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "BRUTE_FORCE").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOCK_USER").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "Lock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson(), // api !!!
              new TestReq().setProps("action", "UNLOCK_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Unlock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson(), // api !!!
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "UNLOCK_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Unlock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson()
      };

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      private String convert(String[] trs) {
        JsonArray  jsonArray = new JsonArray();
        for (String tr : trs) {
          JsonElement jsonObject = JsonParser.parseString(tr);
          jsonArray.add(jsonObject);
        }
        return jsonArray.toString();
      }

      CheckResult testApi(String user, String body, int status, String api, String method, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, api, method, message);


        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status, String[] role) {

        HttpResponse response = checkResponseStatus(null, body, status, signUpApi, "POST", "");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }



        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString())))
                        .value("roles", role));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }

        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi, "GET", message);

        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user) {
        JsonObject userJson = getJson(user).getAsJsonObject();

        HttpResponse response = checkResponseStatus(user, body, status, api, "POST", "");

        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", "The password has been updated successfully"));
        }
        return CheckResult.correct();
      }

      private CheckResult testGetAdminApi(String api, int status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          // Check is it array of JSON in response or something else
          if (!response.getJson().isJsonArray()) {
            return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                    response.getContent().getClass());
          }
          JsonArray correctJson = getJson(answer).getAsJsonArray();
          JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

          if (responseJson.size() == 0)  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }

          if (responseJson.size() != correctJson.size())  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }

          for (int i = 0; i < responseJson.size(); i++) {

            String[] roles = new String[correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size()];
            for(int j=0; j<correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size(); j++) {
              roles[j]=correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").get(j).getAsString();
            }

            expect(responseJson.get(i).getAsJsonObject().toString()).asJson()
                    .check(isObject()
                            .value("id", isInteger())
                            .value("name", correctJson.get(i).getAsJsonObject().get("name").getAsString())
                            .value("lastname", correctJson.get(i).getAsJsonObject().get("lastname").getAsString())
                            .value("email", correctJson.get(i).getAsJsonObject().get("email").getAsString())
                            .value("roles", isArray( roles )));
          }
        }
        return CheckResult.correct();
      }

      CheckResult testPutAdminApi(String api, HttpStatus status, String user, String reqUser,
                                  String role, String operation, String[] respRoles, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);
        request.addProperty("role", role);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("id", isInteger())
                          .value("name", jsonUser.get("name").getAsString())
                          .value("lastname", jsonUser.get("lastname").getAsString())
                          .value("email", jsonUser.get("email").getAsString().toLowerCase())
                          .value("roles", isArray(respRoles)));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", respRoles[0])
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutAccessApi(String api, HttpStatus status, String user, String reqUser,
                                   String operation, String answer, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response

        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("status", answer));
        } else {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }


        return CheckResult.correct();
      }

      CheckResult testLocking(String api, HttpStatus status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(), api, "GET", message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testRoleModelNegative(String api, String method, HttpStatus status, String user, String body, String message) {

        HttpResponse response = checkResponseStatus(user, body, status.value(), api, method.toUpperCase(), message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", "Access Denied!")
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      private CheckResult testAuditorApi(String api, int status, String user, String answer,
                                         int position, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonArray correctJson = getJson(answer).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
        if (responseJson.size() == 0) {
          throw new WrongAnswer("Empty array in response!");
        }

        if (responseJson.size() != correctJson.size()) {
          throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                  " events in response, must be - " + correctJson.size() + "\n" +
                  "response:\n" + getPrettyJson(responseJson)  + "\n" +
                  "must be:\n " + getPrettyJson(correctJson));
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(responseJson.get(position).toString()).asJson().check(
                  isObject()
                          .value("action", correctJson.get(position).getAsJsonObject().get("action").getAsString())
                          .value("subject", correctJson.get(position).getAsJsonObject().get("subject").getAsString())
                          .value("object", isString( o -> o.contains(correctJson.get(position).getAsJsonObject().get("object").getAsString())))
                          .value("path", isString())
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }

      CheckResult testDeleteAdminApi(String api, HttpStatus status, String user, String param,
                                     String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(),
                api + param, "DELETE", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("user", param.toLowerCase())
                          .value("status", answer));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api + param)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }


      /**
       * Method for testing api response
       *
       * @param user string representation of user information in JSON format (String)
       * @param body request body (String)
       * @param status expected response status (int)
       * @param api testing api (String)
       * @param method method for api (String)
       * @param message test hints for student (String)
       * @return response (HttpResponse)
       */
      private HttpResponse checkResponseStatus(String user, String body,
                                               int status, String api, String method, String message) {
        HttpRequest request = null;
        switch (method) {
          case "GET":
            request = get(api);
            break;
          case "POST":
            request = post(api, body);
            break;
          case "PUT":
            request = put(api, body);
            break;
          case "DELETE":
            request = delete(api);
            break;
        }

        if (user != null) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          request = request.basicAuth(login, password);
        }
        HttpResponse response = request.send();

        if (response.getStatusCode() != status) {
          throw new WrongAnswer(method + " " + api  + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        return response;
      }

      private String getSub (String[] src, int position) {
        return convert(Arrays.copyOfRange(src, 0, position));
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Create administrator and auditor
              () -> testPostSignUpResponse(jDCorrectUser, 200, new String[] {"ROLE_ADMINISTRATOR"}), // 1
              () -> testPostSignUpResponse(ivanIvanovCorrectUser, 200, new String[] {"ROLE_USER"}), // 2
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      ivanIvanovCorrectUser, "AUDITOR", "GRANT",
                      new String[] {"ROLE_AUDITOR", "ROLE_USER"}, ""), // 3

              // Testing user registration positive tests
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 0,"'CREATE_USER' security event missing"), // 4
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 1,"'CREATE_USER' security event missing"), // 5
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 2,"'GRANT_ROLE' security event missing"), // 6
              () -> testPostSignUpResponse(maxMusLower, 200, new String[] {"ROLE_USER"}), // 7
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 4), 3,"'CREATE_USER' security event missing"), // 8
              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}), // 9
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 5), 4,"'CREATE_USER' security event missing"), // 10

    //
    //          // Test authentication, positive tests
              () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 11
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 12
    //
    //          // Test authentication, negative tests
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 13
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 6), 5,"'LOGIN_FAILED' security event missing"), // 14
              () -> testUserRegistration(maxMusWrongEmail, 401, "Wrong password!"), // 15
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 7), 6,"'LOGIN_FAILED' security event missing"), // 16
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 17
              () -> testApi(null, "", 401, getEmployeePaymentApi, "GET",
                      "This api only for authenticated user"), // 18
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 8), 7,"'LOGIN_FAILED' security event missing"), // 19

    //          // Testing persistence
              () -> restartApplication(), // 20
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."), // 21

              // Changing roles
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDCorrectUser,
                      jDCorrectUser, "AUDITOR", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add administrative role to business user!"), // 22
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      petrPetrovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, "Trying to add role ACCOUNTANT to user"), // 23
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 9), 8,"'GRANT_ROLE' security event missing"), // 24
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      petrPetrovCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"ROLE_USER"}, "Trying to remove role ACCOUNTANT from user"), // 25
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 10), 9,"'REMOVE_ROLE' security event missing"), // 26

              //Delete user
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDCorrectUser,
                      "petrpetrov@acme.com", "Deleted successfully!", "Trying to delete user"), // 27
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 11), 10,"'DELETE_USER' security event missing"), // 28

              // Change password
              () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser), // 29
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 12), 11,"'CHANGE_PASSWORD' security event missing"), // 30

              // Testing role model negative case
              () -> testRoleModelNegative(putRoleApi, "PUT", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 31
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 13), 12,"'ACCESS_DENIED' security event missing"), // 32
              () -> testRoleModelNegative(adminApi, "GET", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 33
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 14), 13,"'ACCESS_DENIED' security event missing"), // 34
              () -> testRoleModelNegative(adminApi, "DELETE", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 35
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 15), 14,"'ACCESS_DENIED' security event missing"), // 36
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 37
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 16), 15,"'ACCESS_DENIED' security event missing"), // 38
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, maxMusCorrectUser,
                      "", "Trying to access endpoint with wrong role"), // 39
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 17), 16,"'ACCESS_DENIED' security event missing"), // 40
              () -> testRoleModelNegative(getEmployeePaymentApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 41
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 18), 17,"'ACCESS_DENIED' security event missing"), // 42

              () -> testRoleModelNegative(auditorApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 43
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 19), 18,"'ACCESS_DENIED' security event missing"), // 44

              // Testing locking user
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 45
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 20), 19,"'LOGIN_FAILED' security event missing"), // 46
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 47
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 21), 20,"'LOGIN_FAILED' security event missing"), // 48
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 49
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 22), 21,"'LOGIN_FAILED' security event missing"), // 50
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 51
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 23), 22,"'LOGIN_FAILED' security event missing"), // 52
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 53
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 26), 23,"'LOGIN_FAILED' security event missing"), // 54
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, maxMusCorrectUser,
                      "User account is locked", "User must be locked after 5 attempts with wrong password"), // 55
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 26), 24,"'BRUTE_FORCE' security event missing"), // 56
              () -> testPutAccessApi(putAccessApi, HttpStatus.OK, jDNewPass,
                      maxMusCorrectUser,"UNLOCK",
                      "User maxmustermann@acme.com unlocked!", "User must be unlocked through admin endpoint"), // 57
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 27), 25,"'LOCK_USER' security event missing"), // 58
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 27), 26,"'UNLOCK_USER' security event missing"), // 59
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 60
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 28), 27,"'LOGIN_FAILED' security event missing"), // 61
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 62
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 29), 28,"'LOGIN_FAILED' security event missing"), // 63
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 64
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 30), 29,"'LOGIN_FAILED' security event missing"), // 65
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 66
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 31), 30,"'LOGIN_FAILED' security event missing"), // 67
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login!"), // 68
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 69
              () -> testUserRegistration(maxMusCorrectUser, 200,
                      "Counter of failed login attempts must be reset after successfully login!"), // 70
              () -> testPutAccessApi(putAccessApi, HttpStatus.OK, jDNewPass,
                      maxMusCorrectUser,"LOCK",
                      "User maxmustermann@acme.com locked!", ""), // 71
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 33), 31,"'LOCK_USER' security event missing"), // 72
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, maxMusCorrectUser,
                      "User account is locked", "User must be locked through admin endpoint"), // 72
              () -> testPutAccessApi(putAccessApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDCorrectUser,"LOCK",
                      "Can't lock the ADMINISTRATOR!", ""),
              () -> testGetAdminApi(adminApi, 200, jDNewPass,
                      firstResponseAdminApi, "Api must be available to admin user"),

              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovCorrectUser, 200,
                      "User must be locked only after 5 attempts with wrong password"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovCorrectUser, 200,
                      "In case of a successful login, reset the counter of the failed attempt."),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, petrPetrovCorrectUser,
                      "User account is locked", "User must be locked after 5 attempts with wrong password!"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 200, jDNewPass,
                      secondResponseAdminApi, "Api must be available to admin user")
      };

    }
  learner_created: false
- name: src/account/businesslayer/Role.java
  visible: true
  text: |
    package account.businesslayer;

    import javax.persistence.*;
    import javax.validation.constraints.NotEmpty;
    import java.util.HashSet;
    import java.util.Set;

    @Entity
    public class Role {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long id;
        @Column
        @NotEmpty
        String code;

        @Column
        @NotEmpty
        String name;



        @ManyToMany(mappedBy = "userRoles",fetch = FetchType.EAGER)
        Set<UserInfo> users = new HashSet<>();


        public Role() {
        }

        public Role(long id, String code, String name) {
            this.name = name;
            this.code = code;
            this.id = id;
        }


        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public Role(long id, String code) {
            this.id = id;
            this.code = code;
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getCode() {
            return code;
        }

        public void setCode(String code) {
            this.code = code;
        }

        public Set<UserInfo> getUsers() {
            return users;
        }

        public void setUsers(Set<UserInfo> users) {
            this.users = users;
        }
    }
  learner_created: true
- name: src/account/errors/RolesCombineException.java
  visible: true
  text: |
    package account.errors;

    public class RolesCombineException extends  RuntimeException{
        public RolesCombineException() {
            super("The user cannot combine administrative and business roles!");
        }
    }
  learner_created: true
- name: src/account/businesslayer/UserInfo.java
  visible: true
  text: |
    package account.businesslayer;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import org.springframework.security.core.GrantedAuthority;

    import javax.persistence.*;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import javax.validation.constraints.Size;
    import java.util.Collection;
    import java.util.HashSet;
    import java.util.Set;

    @Entity
    @Table(name = "userinfo")
    public class UserInfo {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long id;
        @Column
        @NotEmpty
        private String name;
        @Column
        @NotEmpty
        private String lastname;
        @Column
        @NotNull
        @Pattern(regexp = "[a-zA-Z]+@acme.com")
        private String email;
        @Column
        @NotEmpty
        @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
        @Size(min = 12, message = "Password length must be 12 chars minimum!")
    // – аннотация работает только тогда когда мы получаем объект из JSON
        private String password;

        @ManyToMany(cascade = {CascadeType.PERSIST,
                CascadeType.MERGE},fetch = FetchType.EAGER)
        @JoinTable(
                name = "user_role",
                joinColumns = @JoinColumn(name = "user_id"),
                inverseJoinColumns = @JoinColumn(name = "role_id")
        )
        private Set<Role> userRoles = new HashSet<>();

        public UserInfo(long id, String name, String lastname, String email, Set<Role> userRoles) {
            this.id = id;
            this.name = name;
            this.lastname = lastname;
            this.email = email;
            this.userRoles = userRoles;
        }

        public UserInfo(String name, String lastname, String email, String password) {
            this.name = name;
            this.lastname = lastname;
            this.email = email;
            this.password = password;
        }

        public UserInfo() {
        }

        public UserInfo(long id, String name, String lastname, String email) {
            this.id = id;
            this.name = name;
            this.lastname = lastname;
            this.email = email;
        }

        public Set<Role> getUserRoles() {
            return userRoles;
        }

        public void setUserRoles(Set<Role> userRoles) {
            this.userRoles = userRoles;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }


    }
  learner_created: true
- name: src/account/errors/SalaryPeriodValidator.java
  visible: true
  text: |
    package account.errors;

    import javax.validation.ConstraintValidator;
    import javax.validation.ConstraintValidatorContext;

    public class SalaryPeriodValidator implements ConstraintValidator<SalaryPeriodConstraint, String> {
        @Override
        public boolean isValid(String periodField, ConstraintValidatorContext context) {
            return periodField.matches("([0][1-9]-2[0-9]{3}|[1][0-2]-2[0-9]{3})");
        }
    }
  learner_created: true
- name: src/account/errors/ControllerExceptionHandler.java
  visible: true
  text: |
    package account.errors;

    import org.springframework.http.HttpHeaders;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.http.converter.HttpMessageNotReadableException;
    import org.springframework.web.bind.MethodArgumentNotValidException;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.context.request.WebRequest;
    import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

    import javax.validation.ConstraintViolation;
    import javax.validation.ConstraintViolationException;
    import java.time.LocalDateTime;
    import java.util.LinkedHashMap;
    import java.util.Map;
    import java.util.Set;

    @ControllerAdvice
    public class ControllerExceptionHandler extends ResponseEntityExceptionHandler {

        @ExceptionHandler(ConstraintViolationException.class)
        public ResponseEntity handle(ConstraintViolationException constraintViolationException, WebRequest request) {
            Set<ConstraintViolation<?>> violations = constraintViolationException.getConstraintViolations();
            String errorMessage = "";
            Map<String, Object> body = new LinkedHashMap<>();
            if (!violations.isEmpty()) {
                StringBuilder builder = new StringBuilder();
                violations.forEach(violation -> builder.append(" " + violation.getMessage()));
                errorMessage = builder.toString();

                body.put("timestamp", LocalDateTime.now());
                body.put("status", HttpStatus.BAD_REQUEST.value());
                body.put("error", HttpStatus.BAD_REQUEST.getReasonPhrase());
                body.put("message", errorMessage);
                body.put("path", request.getDescription(false).replace("uri=", ""));

            } else {
                errorMessage = "ConstraintViolationException occured.";
            }
            return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
        }


        @ExceptionHandler({RolesCombineException.class, AdminRoleRemoveException.class,UserMustHaveAtLeastOneRoleException.class, UserNotHaveRoleException.class,DoubleSalaryException.class, UserExistException.class, CompromisedPasswordException.class, SamePasswordException.class})
        public ResponseEntity<Object> handleMyOwnExceptions(
                RuntimeException e, WebRequest request) {

            Map<String, Object> body = new LinkedHashMap<>();
            body.put("timestamp", LocalDateTime.now());
            body.put("status", HttpStatus.BAD_REQUEST.value());
            body.put("error", HttpStatus.BAD_REQUEST.getReasonPhrase());
            body.put("message", e.getMessage());
            body.put("path", request.getDescription(false).replace("uri=", ""));


            return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
        }

        /**
         *
         * @param e
         * @param request
         * @return NotFoundException
         */
        @ExceptionHandler({UserNotFoundException.class, RoleNotFoundException.class})
        public ResponseEntity<Object> handleUserNotFoundExceptions(
                RuntimeException e, WebRequest request) {

            Map<String, Object> body = new LinkedHashMap<>();
            body.put("timestamp", LocalDateTime.now());
            body.put("status", HttpStatus.NOT_FOUND.value());
            body.put("error", HttpStatus.NOT_FOUND.getReasonPhrase());
            body.put("message", e.getMessage());
            body.put("path", request.getDescription(false).replace("uri=", ""));


            return new ResponseEntity<>(body, HttpStatus.NOT_FOUND);
        }

        @ExceptionHandler({AdminDeletionAttemptException.class})
        public ResponseEntity<Object> adminHimselfDeletionException(
                RuntimeException e, WebRequest request) {

            Map<String, Object> body = new LinkedHashMap<>();
            body.put("timestamp", LocalDateTime.now());
            body.put("status", HttpStatus.BAD_REQUEST.value());
            body.put("error", HttpStatus.BAD_REQUEST.getReasonPhrase());
            body.put("message", e.getMessage());
            body.put("path", request.getDescription(false).replace("uri=", ""));


            return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
        }

        @Override
        protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {
            Map<String, Object> body = new LinkedHashMap<>();
            body.put("timestamp", LocalDateTime.now());
            body.put("status", HttpStatus.BAD_REQUEST.value());
            body.put("error", HttpStatus.BAD_REQUEST.getReasonPhrase());
            body.put("message", ex.getBindingResult().getAllErrors().get(0).getDefaultMessage());
            body.put("path", request.getDescription(false).replace("uri=", ""));
            return new ResponseEntity<>(body, headers, status);
        }

        @Override
        protected ResponseEntity<Object> handleHttpMessageNotReadable(HttpMessageNotReadableException ex, HttpHeaders headers, HttpStatus status, WebRequest request) {

            Map<String, Object> body = new LinkedHashMap<>();
            body.put("timestamp", LocalDateTime.now());
            body.put("status", HttpStatus.BAD_REQUEST.value());
            body.put("error", HttpStatus.BAD_REQUEST.getReasonPhrase());
            body.put("message", ex.getMessage());
            body.put("path", request.getDescription(false).replace("uri=", ""));
            return new ResponseEntity<>(body, headers, status);
        }
    }
  learner_created: true
- name: src/account/errors/RoleNotFoundException.java
  visible: true
  text: |+
    package account.errors;

    public class RoleNotFoundException extends RuntimeException {
            public RoleNotFoundException() {
                super("Role not found!");
            }
        }


  learner_created: true
- name: src/account/businesslayer/UserRegistredDTO.java
  visible: true
  text: |
    package account.businesslayer;

    import java.util.Set;

    public class UserRegistredDTO {
        private  long id;
        private String name;
        private String lastname;
        private String email;
        private Set<String> roles;

        public UserRegistredDTO(long id, String name, String lastname, String email, Set<String> roles) {
            this.id = id;
            this.name = name;
            this.lastname = lastname;
            this.email = email.toLowerCase();
            this.roles = roles;
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public Set<String> getRoles() {
            return roles;
        }

        public void setRoles(Set<String> roles) {
            this.roles = roles;
        }
    }
  learner_created: true
- name: src/account/errors/SalaryPeriodConstraint.java
  visible: true
  text: |
    package account.errors;

    import javax.validation.Constraint;
    import javax.validation.Payload;
    import java.lang.annotation.ElementType;
    import java.lang.annotation.Retention;
    import java.lang.annotation.RetentionPolicy;
    import java.lang.annotation.Target;


    @Constraint(validatedBy = SalaryPeriodValidator.class)
    @Target({ElementType.METHOD, ElementType.FIELD})
    @Retention(RetentionPolicy.RUNTIME)

    public @interface SalaryPeriodConstraint {
        String message() default "Wrong dateeeee!";

        Class<?>[] groups() default {};

        Class<? extends Payload>[] payload() default {};
    }
  learner_created: true
- name: src/account/businesslayer/UserChangeRoleDTO.java
  visible: true
  text: |
    package account.businesslayer;

    public class UserChangeRoleDTO {
        private String user;
        private String role;
        private String operation;

        public String getUser() {
            return user;
        }

        public void setUser(String user) {
            this.user = user;
        }

        public String getRole() {
            return role;
        }

        public void setRole(String role) {
            this.role = role;
        }

        public String getOperation() {
            return operation;
        }

        public void setOperation(String operation) {
            this.operation = operation;
        }

        public UserChangeRoleDTO() {
        }

        public UserChangeRoleDTO(String user, String role, String operation) {
            this.user = user;
            this.role = role;
            this.operation = operation;
        }
    }
  learner_created: true
- name: src/account/errors/UserNotFoundException.java
  visible: true
  text: |+
    package account.errors;

    public class UserNotFoundException extends RuntimeException {

        public UserNotFoundException() {
            super("User not found!");
        }
    }


  learner_created: true
- name: src/account/utils/SalaryComparator.java
  visible: true
  text: |
    package account.utils;

    import account.businesslayer.Salary;

    import java.util.Comparator;

    public class SalaryComparator implements Comparator<Salary> {
        @Override
        public int compare(Salary o1, Salary o2) {
            if (o1.getEmployee().equals(o2.getEmployee())) {

            }
            return 1;

        }
    }
  learner_created: true
- name: src/account/errors/UserExistException.java
  visible: true
  text: |
    package account.errors;

    public class UserExistException extends RuntimeException {
        public UserExistException() {
            super("User exist!");
        }
    }
  learner_created: true
- name: src/account/errors/UserNotHaveRoleException.java
  visible: true
  text: |
    package account.errors;

    public class UserNotHaveRoleException extends RuntimeException{
        public UserNotHaveRoleException() {
            super("The user does not have a role!");
        }
    }
  learner_created: true
- name: src/account/errors/UserMustHaveAtLeastOneRoleException.java
  visible: true
  text: |
    package account.errors;

    public class UserMustHaveAtLeastOneRoleException extends  RuntimeException{
        public UserMustHaveAtLeastOneRoleException() {
            super("The user must have at least one role!");
        }
    }
  learner_created: true
- name: src/account/errors/WrongPeriodException.java
  visible: true
  text: |
    package account.errors;

    public class WrongPeriodException extends RuntimeException {
        public WrongPeriodException() {
            super("Wrong date!");
        }
    }
  learner_created: true
- name: src/account/errors/SamePasswordException.java
  visible: true
  text: |
    package account.errors;

    public class SamePasswordException extends RuntimeException {
        public SamePasswordException() {
            super("The passwords must be different!");
        }
    }
  learner_created: true
- name: src/account/errors/WrongFormatUserInfoJson.java
  visible: true
  text: |
    package account.errors;

    public class WrongFormatUserInfoJson extends RuntimeException {
        public WrongFormatUserInfoJson() {
            super();
        }
    }
  learner_created: true
- name: src/account/businesslayer/SalaryService.java
  visible: true
  text: |
    package account.businesslayer;

    import account.persistence.SalaryRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    import java.util.ArrayList;
    import java.util.List;

    @Service
    public class SalaryService {

        private final SalaryRepository repository;

        @Autowired
        public SalaryService(SalaryRepository repository) {
            this.repository = repository;
        }

        public Salary saveSalaryToDb(Salary salary) {
            return repository.save(salary);
        }

        public List<Salary> saveSalaryToDb(List<Salary> payroll) {
            List<Salary> salariesList = new ArrayList<>();
            Iterable<Salary> salaries = repository.saveAll(payroll);
            for (Salary salary : salaries
            ) {
                salariesList.add(salary);
            }

            return salariesList;
        }

        public Salary findByEmailIgnoreCaseAndPeriod1(String email, String period) {
            return repository.findByEmployeeAndPeriodIgnoreCase(email, period);
        }

        public Salary findByEmailAndPeriod2(String email, String period) {
            return repository.findByEmployeeAndPeriod(email, period);
        }


        public Salary findByPeriod(String period) {
            return repository.findByPeriod(period);
        }

        public List<Salary> findAllSalariesForCurrentUser(String email) {
            return repository.findByEmployee(email);
        }

        public List<Salary> findAllSalaries() {
            List<Salary> salariesList = new ArrayList<>();
            Iterable<Salary> all = repository.findAll();
            for (Salary salary : all
            ) {
                salariesList.add(salary);
            }

            return salariesList;
        }


    }
  learner_created: true
- name: src/account/errors/DoubleSalaryException.java
  visible: true
  text: |
    package account.errors;

    public class DoubleSalaryException extends RuntimeException {
        public DoubleSalaryException() {
            super("Error!");

        }
    }
  learner_created: true
- name: src/account/businesslayer/EntityService.java
  visible: true
  text: |-
    package account.businesslayer;

    //@Component
    //public class EntityService {
    //    private EntityManager entityManager;
    //    @Autowired
    //    public EntityService(EntityManagerFactory entityManagerFactory) {
    //        this.entityManager = entityManagerFactory.createEntityManager();
    //    }
    //
    //
    //    public UserInfo  setRole(UserInfo userToSetRole) {
    //        entityManager.getTransaction().begin();
    //        UserInfo userInfo = entityManager.find(UserInfo.class, 1L);
    //        if (userInfo == null) {
    //            userToSetRole.getUserRoles().add(entityManager.find(Role.class, 1L));
    //        }
    //        else {
    //            userToSetRole.getUserRoles().add(entityManager.find(Role.class, 3L));
    //        }
    //
    //        entityManager.getTransaction().commit();
    //        entityManager.clear();
    //
    //        return userToSetRole;
    //
    //    }
    //    public void insertEntities() {
    //
    //        entityManager.getTransaction().begin();
    //
    //        Role admin = new Role(1,"Administrator");
    //        Role accountant = new Role(2,"Accountant");
    //        Role user = new Role(3,"User");
    //        Role anonymous = new Role(4,"Anonymous");
    //
    //
    //
    //       //catLeo.setPeopleInContact(Set.of(catLover1, catLover2));
    //       //dogCharlie.getPeopleInContact().add(dogLover1);
    //       //dogBella.getPeopleInContact().add(dogLover1);
    //
    //        entityManager.persist(admin);//сохранить
    //        entityManager.persist(accountant);
    //        entityManager.persist(user);
    //        entityManager.persist(anonymous);
    //
    //        entityManager.getTransaction().commit();
    //        entityManager.clear();
    //    }
    //}
    //
  learner_created: true
- name: src/account/errors/AdminDeletionAttemptException.java
  visible: true
  text: |
    package account.errors;

    public class AdminDeletionAttemptException extends  RuntimeException{
        public AdminDeletionAttemptException() {
            super("Can't remove ADMINISTRATOR role!");
        }
    }
  learner_created: true
- name: src/account/utils/YearMonthDateAttributeConverter.java
  visible: true
  text: |
    package account.utils;

    import javax.persistence.AttributeConverter;
    import java.time.Instant;
    import java.time.YearMonth;
    import java.time.ZoneId;

    public class YearMonthDateAttributeConverter
            implements AttributeConverter<YearMonth, java.sql.Date> {

        @Override
        public java.sql.Date convertToDatabaseColumn(
                YearMonth attribute) {
            if (attribute != null) {
                return java.sql.Date.valueOf(
                        attribute.atDay(1)
                );
            }
            return null;
        }

        @Override
        public YearMonth convertToEntityAttribute(
                java.sql.Date dbData) {
            if (dbData != null) {
                return YearMonth.from(
                        Instant
                                .ofEpochMilli(dbData.getTime())
                                .atZone(ZoneId.systemDefault())
                                .toLocalDate()
                );
            }
            return null;
        }
    }
  learner_created: true
- name: src/account/persistence/UserRepository.java
  visible: true
  text: |
    package account.persistence;

    import account.businesslayer.UserInfo;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface UserRepository extends CrudRepository<UserInfo, Long> {
        UserInfo findByEmailIgnoreCase(String email);

        UserInfo findByNameIgnoreCase(String name);
    }
  learner_created: true
- name: src/account/UserInfoDetailsImpl.java
  visible: true
  text: |
    package account;

    import account.businesslayer.Role;
    import account.businesslayer.UserInfo;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.ArrayList;
    import java.util.Collection;
    import java.util.List;
    import java.util.Set;

    public class UserInfoDetailsImpl implements UserDetails {
        private final String name;
        private final String lastname;
        private final String email;
        private final String password;

        private final Collection<GrantedAuthority> authorities;


        public UserInfoDetailsImpl(UserInfo userInfo) {
            this.name = userInfo.getName();
            this.lastname = userInfo.getLastname();
            this.email = userInfo.getEmail();
            this.password = userInfo.getPassword();

            this.authorities = setAuthorities(userInfo);

        }
    private  Collection<GrantedAuthority>  setAuthorities(UserInfo userInfo) {
        Set<Role> userRoles = userInfo.getUserRoles();
        Collection<GrantedAuthority> authorities = new ArrayList<>(userRoles.size());

        for (Role role : userRoles) {
            authorities.add(new SimpleGrantedAuthority(role.getCode()));
        }
        return  authorities;
    }


        public String getName() {
            return name;
        }

        public String getLastname() {
            return lastname;
        }

        public String getEmail() {
            return email;
        }

        @Override
        public Collection<GrantedAuthority> getAuthorities() {
            return authorities;
        }

        @Override
        public String getPassword() {
            return password;
        }

        @Override
        public String getUsername() {
            return name;
        }



        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }


    }
  learner_created: true
- name: src/account/errors/CompromisedPasswordException.java
  visible: true
  text: |
    package account.errors;

    public class CompromisedPasswordException extends RuntimeException {


        public CompromisedPasswordException() {
            super("The password is in the hacker's database!");
        }
    }
  learner_created: true
- name: src/account/errors/AdminRoleRemoveException.java
  visible: true
  text: |
    package account.errors;

    public class AdminRoleRemoveException extends  RuntimeException{
        public AdminRoleRemoveException() {
            super("Can't remove ADMINISTRATOR role!");
        }
    }
  learner_created: true
- name: src/account/errors/CustomErrorResponse.java
  visible: true
  text: |
    package account.errors;

    import java.time.LocalDateTime;

    public class CustomErrorResponse {
        private int statusCode;
        private LocalDateTime timestamp;
        private String message;
        private String description;

        public CustomErrorResponse(
                int statusCode,
                LocalDateTime timestamp,
                String message,
                String description) {

            this.statusCode = statusCode;
            this.timestamp = timestamp;
            this.message = message;
            this.description = description;
        }

        public int getStatusCode() {
            return statusCode;
        }

        public void setStatusCode(int statusCode) {
            this.statusCode = statusCode;
        }

        public LocalDateTime getTimestamp() {
            return timestamp;
        }

        public void setTimestamp(LocalDateTime timestamp) {
            this.timestamp = timestamp;
        }

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(String description) {
            this.description = description;
        }
    }
  learner_created: true
- name: src/account/businesslayer/SalaryResponseDTO.java
  visible: true
  text: |
    package account.businesslayer;

    public class SalaryResponseDTO {
        private String name;
        private String lastname;
        private String period;
        private String salary;

        public SalaryResponseDTO(String name, String lastname, String period, String salary) {
            this.name = name;
            this.lastname = lastname;
            this.period = period;
            this.salary = salary;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }

        public String getPeriod() {
            return period;
        }

        public void setPeriod(String period) {
            this.period = period;
        }

        public String getSalary() {
            return salary;
        }

        public void setSalary(String salary) {
            this.salary = salary;
        }
    }
  learner_created: true
- name: src/resources/static/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Main</title>
    </head>
    <body>
    <h1>Welcome!</h1>
    </body>
    </html>
  learner_created: true
- name: src/account/businesslayer/Salary.java
  visible: true
  text: |
    package account.businesslayer;

    import account.errors.SalaryPeriodConstraint;

    import javax.persistence.*;
    import javax.validation.constraints.Positive;
    import java.time.LocalDate;
    import java.time.YearMonth;
    import java.time.format.DateTimeFormatter;
    import java.util.Objects;

    @Entity
    @Table(name = "salary")
    public class Salary {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long id;


        // @ManyToOne
        // @JoinColumn(name = "employee")
        // private UserInfo userInfo;

        @Column
        private String employee;

        // @Temporal(TemporalType.DATE)
        // @Column(columnDefinition = "date")
        //@Pattern(regexp = "([0][1-9]-2[0-9]{3}|[1][0-2]-2[0-9]{3})", message = "Wrong date!")
        @SalaryPeriodConstraint
        //@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "MM-yyyy")
        private String period;
        @Positive(message = "Salary must be non negative!")
        @Column
        private Long salary;

        public Salary() {
        }

        public Salary(String email, String period, Long salary) {
            this.employee = email;

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM-yyyy");
            YearMonth ym = YearMonth.parse(period, formatter);

            LocalDate localDate = ym.atDay(1);
            this.period = period;

            this.salary = salary;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Salary salary = (Salary) o;
            return employee.equals(salary.employee) && period.equals(salary.period);
        }

        @Override
        public int hashCode() {
            return Objects.hash(employee, period);
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getPeriod() {

            return period;
        }

        public void setPeriod(String period) {
            //DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM-yyyy");
            //YearMonth ym = YearMonth.parse(period, formatter);
            //LocalDate localDate = ym.atDay(1);

            this.period = period;


        }

        public String getEmployee() {
            return employee;
        }


        public void setEmployee(String employee) {
            this.employee = employee;
        }

        public Long getSalary() {
            return salary;
        }

        public void setSalary(Long salary) {
            this.salary = salary;
        }
    }
  learner_created: true
- name: src/account/persistence/SalaryRepository.java
  visible: true
  text: |
    package account.persistence;

    import account.businesslayer.Salary;
    import org.springframework.data.jpa.repository.Query;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.data.repository.query.Param;
    import org.springframework.stereotype.Repository;

    import java.util.List;

    @Repository
    public interface SalaryRepository extends CrudRepository<Salary, Long> {

        Salary findByEmployeeAndPeriodIgnoreCase(String email, String period);


        @Query("select s from Salary s where s.employee = :employee and s.period = :period")
        Salary findByEmployeeAndPeriod(@Param("employee") String employee,
                                       @Param("period") String period);


        // @Query("select s from Salary s where s.employee = :employee ")
        // Salary findByEmployee(@Param("employee") String employee);

        @Query("select s from Salary s where s.period = :period ")
        Salary findByPeriod(@Param("period") String period);


        //List<Salary> findByEmployee(String employee);
        @Query("select s from Salary s where s.employee = :employee order by period desc")
        List<Salary> findByEmployee(@Param("employee") String employee);
    }
  learner_created: true
- name: src/account/SecurityAdapter.java
  visible: true
  text: |
    package account;

    import account.errors.CustomAccessDeniedHandler;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.web.access.AccessDeniedHandler;

    @EnableWebSecurity
    public class SecurityAdapter extends WebSecurityConfigurerAdapter {
        @Autowired
        UserInfoDetailsService userInfoDetailsService;
        @Bean
        public PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder();
        }


        @Override
        protected void configure(AuthenticationManagerBuilder auth) throws Exception {
            auth
                    .userDetailsService(userInfoDetailsService)
                    .passwordEncoder(getEncoder());


        }

        @Bean
        public AccessDeniedHandler accessDeniedHandler(){
            return new CustomAccessDeniedHandler();
        }
        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http
                    .authorizeRequests()

                   .mvcMatchers(HttpMethod.PUT, "/api/admin/user/role").hasAuthority("Role_Administrator".toUpperCase())
                   .mvcMatchers(HttpMethod.DELETE, "/api/admin/user/**").hasAuthority("Role_Administrator".toUpperCase())


                    .mvcMatchers(HttpMethod.PUT, "/api/acct/payments").hasAuthority("Role_Accountant".toUpperCase())

                    .mvcMatchers(HttpMethod.POST, "/api/acct/payments").hasAuthority("Role_Accountant".toUpperCase())
                    .mvcMatchers("/api/auth/signup").permitAll()
                    .mvcMatchers(HttpMethod.GET, "/api/empl/payment").hasAnyAuthority("Role_User".toUpperCase(), "Role_Accountant".toUpperCase())

                   //.mvcMatchers("/api/empl/payment").authenticated()
                   .mvcMatchers(HttpMethod.POST, "/api/auth/changepass").hasAnyAuthority("ROLE_USER",
                            "Role_Accountant".toUpperCase(), "Role_Administrator".toUpperCase())

                    .mvcMatchers(HttpMethod.GET, "/api/admin/user").hasAuthority("Role_Administrator".toUpperCase())
                    .and().exceptionHandling().accessDeniedHandler(accessDeniedHandler())
                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS) // no session
                    .and()
                    .csrf().disable().headers().frameOptions().disable()
                    .and()
                    .httpBasic(); // (3)
        }



    }
  learner_created: true
- name: src/account/businesslayer/Password.java
  visible: true
  text: |
    package account.businesslayer;

    import com.fasterxml.jackson.annotation.JsonProperty;

    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.Size;

    public class Password {
        @NotEmpty
        @Size(min = 12, message = "Password length must be 12 chars minimum!")
        @JsonProperty("new_password")
        private String passValue;

        public Password() {
        }

        public Password(String passValue) {
            this.passValue = passValue;
        }

        public String getPassValue() {
            return passValue;
        }

        public void setPassValue(String passValue) {
            this.passValue = passValue;
        }
    }
  learner_created: true
- name: src/account/UserInfoDetailsService.java
  visible: true
  text: |+
    package account;

    import account.businesslayer.Role;
    import account.businesslayer.UserInfo;
    import account.businesslayer.UserService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.User;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;

    import java.util.ArrayList;
    import java.util.Collection;
    import java.util.Set;

    @Service
    public class UserInfoDetailsService implements UserDetailsService {
        @Autowired
        UserService service;

        @Override
        public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
            UserInfo fromDb = service.findByEmailIgnoreCase(email);
            if (fromDb == null) {
                throw new UsernameNotFoundException("Not found: " + email);
            }

            return new UserInfoDetailsImpl(fromDb);
           // return User
           //         .withUsername(fromDb.getName())
           //         .password(fromDb.getPassword())
           //         .authorities(getAuthorities(fromDb))
           //         .build();
        }

        private Collection<GrantedAuthority> getAuthorities(UserInfo fromDb) {
            Set<Role> userRoles = fromDb.getUserRoles();
            System.out.println("всего ролей " + userRoles);

            Collection<GrantedAuthority> authorities = new ArrayList<>(userRoles.size());

            for (Role role : userRoles) {
                authorities.add(new SimpleGrantedAuthority(role.getCode()));
            }
            System.out.println("всего authorities " + authorities);
            return authorities;


        }
    }

  learner_created: true
- name: src/account/presentation/Controller.java
  visible: true
  text: |
    package account.presentation;

    import account.UserInfoDetailsImpl;
    import account.businesslayer.*;
    import account.errors.DoubleSalaryException;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.Authentication;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import javax.validation.constraints.Pattern;
    import java.time.YearMonth;
    import java.time.format.DateTimeFormatter;
    import java.util.*;

    @Validated
    @RestController
    public class Controller {


        @Autowired
        UserService userService;

        @Autowired
        SalaryService salaryService;


        @PostMapping("api/acct/payments")
        public ResponseEntity<Map<String, String>> uploadsPayroll(@RequestBody List<@Valid Salary> payroll) {

            Set<Salary> salariesInset = new HashSet<Salary>();
            salariesInset.addAll(payroll);
            System.out.println(salariesInset.size() == payroll.size());
            if (payroll.size() == salariesInset.size()) {
                List<Salary> salaries = salaryService.saveSalaryToDb(payroll);
                if (!salaries.isEmpty()) {

                    Map<String, String> body = new LinkedHashMap<>();

                    body.put("status", "Added successfully!");

                    return new ResponseEntity<>(body, HttpStatus.OK);

                } else {
                    Map<String, String> body = new LinkedHashMap<>();

                    body.put("status", "WRONG!");

                    return new ResponseEntity<>(body, HttpStatus.NOT_FOUND);
                }
            } else {
                throw new DoubleSalaryException();
            }


        }

        @PutMapping("api/acct/payments")
        public ResponseEntity<Map<String, String>> changeSalaryOfUser(@RequestBody @Valid Salary salary) {
            Salary toSave = salaryService.findByEmailIgnoreCaseAndPeriod1(salary.getEmployee(),
                    salary.getPeriod());
            toSave.setSalary(salary.getSalary());
            salaryService.saveSalaryToDb(toSave);

            Map<String, String> body = new LinkedHashMap<>();

            body.put("status", "Updated successfully!");

            return new ResponseEntity<>(body, HttpStatus.OK);

        }

        @GetMapping(value = "/api/empl/payment")
        public Object getPayment(@RequestParam(required = false) @Pattern(regexp = "([0][1-9]-2[0-9]{3}|[1][0-2]-2[0-9]{3})", message = "Error!") String period, Authentication auth) {

            UserInfoDetailsImpl details = (UserInfoDetailsImpl) auth.getPrincipal();

            String currentUserName = details.getUsername();
            String currentUserLastName = details.getLastname();
            String currentUserEmail = details.getEmail();
            Collection<GrantedAuthority> currUserAuthorities = details.getAuthorities();

            //boolean currUserIsAccountant = currUserAuthorities.contains(new SimpleGrantedAuthority("ROLE_ACCOUNTANT"));
            boolean currUserIsAccountant = isCurrUserIsAccountant(currUserAuthorities);

            if (period != null) {

                Salary byPeriod = salaryService.findByEmailIgnoreCaseAndPeriod1(currentUserEmail, period);
                String strPeriod = byPeriod.getPeriod();
                String periodNewFormat = periodFormatter(strPeriod);
                Long salary = byPeriod.getSalary();
                String salaryNewFormat = salaryFormatter(salary);
                return new SalaryResponseDTO(currentUserName, currentUserLastName, periodNewFormat, salaryNewFormat);

            } else {
               // if (!currUserIsAccountant) {
                    List<Salary> allSalariesForCurrentUser = salaryService.findAllSalariesForCurrentUser(currentUserEmail);
                    List<SalaryResponseDTO> list = new ArrayList<>();
                    for (Salary oldSalary : allSalariesForCurrentUser
                    ) {
                        String periodValue = periodFormatter(oldSalary.getPeriod());
                        String salaryValue = salaryFormatter(oldSalary.getSalary());

                        list.add(new SalaryResponseDTO(currentUserName, currentUserLastName, periodValue, salaryValue));
                    }
                   // if (!list.isEmpty()) {
                        return list;
                    //}
               // } else {
                 //   List<Salary> allSalaries = salaryService.findAllSalaries();
                   // return  allSalaries;
               // }

            }
            //eturn new ArrayList<Salary>();

        }

        private boolean isCurrUserIsAccountant(Collection<GrantedAuthority> authorities) {
            return authorities.stream().anyMatch(a -> a.getAuthority().equalsIgnoreCase("role_accountant"));
        }

        private String salaryFormatter(Long salary) {
            String salaryNewFormat = String.format("%d dollar(s) %d cent(s)", salary / 100, salary % 100);
            return salaryNewFormat;
        }

        private String periodFormatter(String strPeriod) {
            DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("MM-yyyy");
            YearMonth thisYearMonth = YearMonth.parse(strPeriod, dateTimeFormatter);
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MMMM-yyyy");
            String periodNewFormat = thisYearMonth.format(formatter);
            return periodNewFormat;
        }

        @PostMapping("/api/auth/changepass")
        public ResponseEntity<Map<String, Object>> changePassword(@Valid @RequestBody Password password, Authentication auth) {
            UserInfoDetailsImpl details = (UserInfoDetailsImpl) auth.getPrincipal();

            return userService.changePass(password, details);
        }


        @PostMapping(value = "/api/auth/signup")
        public UserRegistredDTO signup(@Valid @RequestBody UserInfo user) {
            return userService.register(user);
        }

        @GetMapping("/api/admin/user")
        public Set<UserRegistredDTO> getUsers() {
            return
                    userService.getAllRegistredUsers();
        }

        @DeleteMapping(value = "api/admin/user/{id}")
        public Map<String, String> deleteUser(@PathVariable("id") String id) {

            return userService.deleteUser(id);
        }

        @PutMapping(value = "/api/admin/user/role")
        public UserRegistredDTO setRole(@RequestBody UserChangeRoleDTO userChangeRoleDTO) {
            return userService.changeRole(userChangeRoleDTO);
        }
    }
  learner_created: true
- name: src/account/persistence/RoleRepository.java
  visible: true
  text: |
    package account.persistence;

    import account.businesslayer.Role;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface RoleRepository extends CrudRepository<Role, Long> {
        Role findByCodeIgnoreCase (String code);
    }
  learner_created: true
- name: src/account/businesslayer/UserService.java
  visible: true
  text: |-
    package account.businesslayer;

    import account.UserInfoDetailsImpl;
    import account.errors.*;
    import account.persistence.RoleRepository;
    import account.persistence.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;

    import java.util.*;
    import java.util.stream.Collectors;

    @Service
    public class UserService {
        @Autowired
        private final UserRepository userRepository;
        @Autowired
        private final RoleRepository roleRepository;

        @Autowired
        PasswordEncoder encoder;

        Set<String> breachedPasswords = new HashSet<>(List.of("PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch", "PasswordForApril",
                "PasswordForMay", "PasswordForJune", "PasswordForJuly", "PasswordForAugust",
                "PasswordForSeptember", "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"));

        public UserService(UserRepository userRepository, RoleRepository roleRepository) {
            this.userRepository = userRepository;
            this.roleRepository = roleRepository;
        }

        private static boolean isEmailExist(UserRepository userRepository, String email) {

            List<UserInfo> allUsers = (List<UserInfo>) userRepository.findAll();
            if (allUsers.isEmpty()) {
                return false;
            } else {
                for (var user : allUsers
                ) {
                    if (user.getEmail().equalsIgnoreCase(email))
                        return true;
                }
                return false;
            }

        }

        public UserInfo saveUserToDb(UserInfo toSave) {
            return userRepository.save(toSave);
        }

        public List<UserInfo> findAllUsers() {
            return (List<UserInfo>) userRepository.findAll();
        }

        public UserInfo findByEmailIgnoreCase(String email) {
            return userRepository.findByEmailIgnoreCase(email);
        }

        public UserInfo findByNameIgnoreCase(String name) {

            return userRepository.findByNameIgnoreCase(name);
        }

        public UserRegistredDTO register(UserInfo user) {


            Role roleAdmin = new Role(1L, "ROLE_Administrator".toUpperCase(), "Administrative Group");
            Role roleAccountant = new Role(2L, "ROLE_Accountant".toUpperCase(), "Business Group");
            Role roleUser = new Role(3L, "ROLE_User".toUpperCase(), "Business Group");
            Role roleAnonymous = new Role(4L, "ROLE_Anonymous".toUpperCase(), "-");

            roleRepository.save(roleAdmin);
            roleRepository.save(roleAccountant);
            roleRepository.save(roleUser);
            roleRepository.save(roleAnonymous);


            if (breachedPasswords.contains(user.getPassword())) {
                throw new CompromisedPasswordException();
            }
            if (isEmailExist(userRepository, user.getEmail().toLowerCase())) {
                throw new UserExistException();
            } else {
                user.setPassword(encoder.encode((user.getPassword())));
                updateUserRole(user);

                UserInfo savedUser = userRepository.save(user);

                Set<Role> userRoles = savedUser.getUserRoles();


                Set<String> rolesCodesAsc = getStringCodeOfRole(userRoles);
                return new UserRegistredDTO(savedUser.getId(), savedUser.getName(), savedUser.getLastname(), savedUser.getEmail().toLowerCase(),
                        rolesCodesAsc);


            }
        }


        public Map<String, String> deleteUser(String deletedId) {

            //Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            //UserInfoDetailsImpl details = (UserInfoDetailsImpl) auth.getPrincipal();

            UserInfo toDelete = userRepository.findByEmailIgnoreCase(deletedId);

            if ((Objects.nonNull(toDelete))) {
                Set<Role> deletingUserRoles = toDelete.getUserRoles();

                if (isAdminDeletingAttemption(deletingUserRoles)) {
                    throw new AdminDeletionAttemptException();
                } else {
                    return delete(deletedId);
                }
            } else {
                throw new UserNotFoundException();
            }
        }


        private boolean isAdminDeletingAttemption(Set<Role> deletingUserRoles) {

            return deletingUserRoles.stream().anyMatch(r -> r.getCode().equalsIgnoreCase("role_administrator"));
            //UserInfo toDelete = userRepository.findByEmailIgnoreCase(deletedId);
            //Set<Role> toDelRoles = toDelete.getUserRoles();
            //Set<String> collect = toDelRoles.stream().map(role -> role.code).collect(Collectors.toSet());
            //Set<SimpleGrantedAuthority> deletedUserAuthorities = collect.stream().map(SimpleGrantedAuthority::new).collect(Collectors.toSet());
            //return deletedUserAuthorities;
        }

        private Map<String, String> delete(String id) {
            UserInfo toDelete = userRepository.findByEmailIgnoreCase(id);
            Map<String, String> responseBody = new HashMap<>();

            userRepository.delete(toDelete);
            responseBody.put("user", id);
            responseBody.put("status", "Deleted successfully!");

            return responseBody;

        }

        //если юзер не найден то 404
        //если роль не найдена то  404
        // если удаляется роль которой пользователь не обладает то 400
        // если удаляется единственная роль то 400
        //если удаляется роль Админ то 400
        // если админ пользователю с ролью админ добавлется бизнес роль, то 400
        // если бизнес пользователю добавляется админ роль то 400
        public UserRegistredDTO changeRole(UserChangeRoleDTO input) {
            String newRole = "ROLE_"+input.getRole().toUpperCase();
            if (userRepository.findByEmailIgnoreCase(input.getUser()) == null) {
                throw new UserNotFoundException();
            }
            Role foundRole = roleRepository.findByCodeIgnoreCase(newRole);
            if (foundRole == null) {
                throw new RoleNotFoundException();
            }

            UserInfo foundUser = userRepository.findByEmailIgnoreCase(input.getUser());
            Set<Role> foundRoles = foundUser.getUserRoles();

            String operation = input.getOperation();
            Role changingRole = roleRepository.findByCodeIgnoreCase(newRole);
            long id = foundUser.getId();
            boolean grant = false;
            boolean remove = false;

            if (operation.equals("REMOVE")) {
                remove = true;

            }
            if (operation.equals("GRANT")) {
                grant = true;
            }


            if (!foundRoles.contains(changingRole) & remove) {
                throw new UserNotHaveRoleException();
            }


            if (foundRoles.size() == 1 & remove & id > 1) {
                throw new UserMustHaveAtLeastOneRoleException();
            }

            if (id == 1 & remove & newRole.equalsIgnoreCase("role_administrator")) { //TODO посмотреть про admin роль
                throw new AdminRoleRemoveException();
            }


            boolean adminWantsBusiness = inAdminGroup(input) & !wantsAdminRole(newRole);
            boolean userWantAdmin = !inAdminGroup(input) & wantsAdminRole(newRole);
            if ((adminWantsBusiness) | (userWantAdmin)) {
                throw new RolesCombineException();
            }


            if (grant) {
                foundUser.getUserRoles().add(changingRole);
                userRepository.save(foundUser);


                String name = foundUser.getName();
                String lastname = foundUser.getLastname();
                String email = foundUser.getEmail().toLowerCase();
                Set<Role> roles = foundUser.getUserRoles();
                Set<String> rolesCodesAsc = getStringCodeOfRole(roles);
                return new UserRegistredDTO(id, name, lastname, email.toLowerCase(), rolesCodesAsc);
            } else {
                foundUser.getUserRoles().remove(changingRole);
                userRepository.save(foundUser);


                String name = foundUser.getName();
                String lastname = foundUser.getLastname();
                String email = foundUser.getEmail().toLowerCase();
                Set<Role> roles = foundUser.getUserRoles();
                Set<String> rolesCodesAsc = getStringCodeOfRole(roles);
                return new UserRegistredDTO(id, name, lastname, email.toLowerCase(), rolesCodesAsc);
            }

        }

        private boolean inAdminGroup(UserChangeRoleDTO input) {
            UserInfo foundUser = userRepository.findByEmailIgnoreCase(input.getUser());
            Set<Role> foundRoles = foundUser.getUserRoles();
            boolean inAdminGroup = foundRoles.stream().anyMatch(r -> r.name.equals("Administrative Group"));
            return inAdminGroup;
        }

        private boolean wantsAdminRole(String role) {
            Role foundRole = roleRepository.findByCodeIgnoreCase(role);
            boolean wantsAdminRole = foundRole.getName().equals("Administrative Group");
            return wantsAdminRole;

        }

        private Set<String> getStringCodeOfRole(Set<Role> userRoles) {
            Set<String> roleCodes = userRoles.stream().map(Role::getCode).collect(Collectors.toSet());
            Set<String> rolesCodesAsc = new TreeSet<>();
            rolesCodesAsc.addAll(roleCodes);
            return rolesCodesAsc;
        }

        private void updateUserRole(UserInfo userInfo) {
            if (!userRepository.findAll().iterator().hasNext()) {
                Role role = roleRepository.findByCodeIgnoreCase("Role_Administrator".toUpperCase());
                userInfo.getUserRoles().add(role);
            } else {
                Role role = roleRepository.findByCodeIgnoreCase("Role_User".toUpperCase());
                userInfo.getUserRoles().add(role);
            }

        }


        public Set<UserRegistredDTO> getAllRegistredUsers() {
            Set<UserRegistredDTO> registredUsers = new TreeSet<>(Comparator.comparing(UserRegistredDTO::getId));
            Iterable<UserInfo> all = userRepository.findAll();
            Iterator<UserInfo> iterator = all.iterator();

            while (iterator.hasNext()) {
                UserInfo next = iterator.next();

                long id = next.getId();
                String name = next.getName();
                String lastname = next.getLastname();
                String email = next.getEmail();
                Set<Role> userRoles = next.getUserRoles();

                Set<String> stringCodeOfRole = getStringCodeOfRole(userRoles);
                UserRegistredDTO userRegistredDTO = new UserRegistredDTO(id, name, lastname, email.toLowerCase(), stringCodeOfRole);

                registredUsers.add(userRegistredDTO);
            }
            return registredUsers;
        }

        public ResponseEntity<Map<String, Object>> changePass(Password newPassword, UserInfoDetailsImpl details) {

            String currentEmail = details.getEmail();

            if (breachedPasswords.contains(newPassword.getPassValue())) {
                throw new CompromisedPasswordException();
            } else if (encoder.matches(newPassword.getPassValue(), details.getPassword())) {
                throw new SamePasswordException();
            } else {


                UserInfo toSave = userRepository.findByEmailIgnoreCase(currentEmail);
                toSave.setPassword(encoder.encode(newPassword.getPassValue()));
                userRepository.save(toSave);

                Map<String, Object> body = new LinkedHashMap<>();
                body.put("email", currentEmail.toLowerCase());
                body.put("status", "The password has been updated successfully");
                return new ResponseEntity<>(body, HttpStatus.OK);
            }
        }
    }
  learner_created: true
- name: src/account/errors/CustomAccessDeniedHandler.java
  visible: true
  text: |-
    package account.errors;

    import com.fasterxml.jackson.databind.ObjectMapper;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.access.AccessDeniedException;
    import org.springframework.security.web.access.AccessDeniedHandler;
    import org.springframework.web.context.request.WebRequest;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;
    import java.time.LocalDateTime;
    import java.util.Calendar;
    import java.util.HashMap;
    import java.util.Map;

    public class CustomAccessDeniedHandler implements AccessDeniedHandler {

        private ObjectMapper objectMapper = new ObjectMapper();

        @Override
        public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException {

            response.setStatus(HttpStatus.FORBIDDEN.value());
            Map<String, Object> body = new HashMap<>();
            body.put(
                    "timestamp",Calendar.getInstance().getTime().toString() //LocalDateTime.now().toString()
                    );
            body.put("status", HttpStatus.FORBIDDEN.value());
            body.put("error", HttpStatus.FORBIDDEN.getReasonPhrase());
            body.put(
                    "message",
                    "Access Denied!");
            body.put("path", request.getRequestURI()); //.replace("uri=", ""));//+request.getServletPath()//request.getContextPath()+request.getPathInfo()+request.getPathTranslated()
            response.getOutputStream()
                    .println(objectMapper.writeValueAsString(body));
        }


    }
  learner_created: true
- name: src/account/businesslayer/Event.java
  visible: true
  learner_created: true
- name: src/account/businesslayer/LoggingEventProperty.java
  visible: true
  learner_created: true
- name: src/account/businesslayer/LoggingEventException.java
  visible: true
  learner_created: true
- name: src/account/utils/MarkerFactory.java
  visible: true
  learner_created: true
- name: src/account/persistence/SecurityEventsRepository.java
  visible: true
  learner_created: true
- name: src/account/businesslayer/EventsService.java
  visible: true
  learner_created: true
- name: src/account/utils/CollectionUtils.java
  visible: true
  learner_created: true
- name: src/account/businesslayer/SecurityEvent.java
  visible: true
  learner_created: true
- name: src/account/businesslayer/UserLockDTO.java
  visible: true
  learner_created: true
- name: src/account/errors/AdminLockingAttemptException.java
  visible: true
  learner_created: true
- name: src/account/errors/AuthenticationEvents.java
  visible: true
  learner_created: true
- name: src/account/errors/RestAuthenticationEntryPoint.java
  visible: true
  learner_created: true
- name: src/account/errors/AuthenticationSuccessEventListener.java
  visible: true
  learner_created: true
- name: src/account/errors/AuthenticationFailureListener.java
  visible: true
  learner_created: true
- name: src/account/errors/LoginSuccessHandler.java
  visible: true
  learner_created: true
- name: src/account/errors/LoginFailureHandler.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16606#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 23 Aug 2022 07:26:00 UTC
record: 6
